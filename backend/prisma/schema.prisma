generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// Enum para los tipos de cliente
enum TipoCliente {
  NATURAL
  EMPRESA
}

// Enum para el estado de la orden
enum EstadoOrden {
  PENDIENTE
  ENTREGADO
}

// Enum para el método de pago
enum MetodoPago {
  EFECTIVO
  TRANSFERENCIA
  PAGO_MOVIL
}

// Enum para los tipos de moneda
enum Moneda {
  USD
  VES
  COP
}

// Enum para el estado de pago
enum EstadoPago {
  COMPLETO
  INCOMPLETO
}

enum Role {
  ADMIN
  EMPLOYEE
}

// Modelo de Usuario
model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String?
  role          Role           @default(EMPLOYEE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ordenesEntregadas Orden[] @relation("DeliveredBy")
}

// Modelo de Cliente
model Cliente {
  id                  Int         @id @default(autoincrement())
  nombre              String
  apellido            String
  tipo                TipoCliente
  telefono            String
  telefono_secundario String?
  direccion           String
  identificacion      String      @unique
  email               String?
  fechaRegistro       DateTime    @default(now())
  ordenes             Orden[]
}

//  Modelo de Categoria
model Categoria {
  id         String     @id @default(uuid())
  nombre     String     @unique
  servicios  Servicio[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// Modelo de Servicio
model Servicio {
  id                Int            @id @default(autoincrement())
  nombreServicio    String
  descripcion       String?
  precioBase        Float
  permiteDecimales  Boolean        @default(false)
  categoriaId       String
  categoria         Categoria      @relation(fields: [categoriaId], references: [id])
  detalleOrdenes    DetalleOrden[]
}

// Modelo de Orden
model Orden {
  id                  Int            @id @default(autoincrement())
  clienteId           Int
  estado              EstadoOrden    @default(PENDIENTE)
  fechaIngreso        DateTime       @default(now())
  fechaEntrega        DateTime?
  observaciones       String?
  total               Float
  abonado             Float          @default(0)
  faltante            Float          @default(0)
  estadoPago          EstadoPago     @default(INCOMPLETO)
  deliveredByUserId   Int?
  deliveredByUserName String?
  cliente             Cliente        @relation(fields: [clienteId], references: [id])
  detalles            DetalleOrden[]
  pagos               Pago[]
  deliveredBy         User?          @relation("DeliveredBy", fields: [deliveredByUserId], references: [id])
  @@index([clienteId])
  @@index([estado])
  @@index([deliveredByUserId])
}

// Modelo de DetalleOrden
model DetalleOrden {
  id          Int      @id @default(autoincrement())
  ordenId     Int
  servicioId  Int
  cantidad    Float
  precioUnit  Float
  subtotal    Float
  orden       Orden    @relation(fields: [ordenId], references: [id])
  servicio    Servicio @relation(fields: [servicioId], references: [id])
}

// Modelo de Pago
model Pago {
  id          Int          @id @default(autoincrement())
  ordenId     Int
  monto       Float
  moneda      Moneda
  metodoPago  MetodoPago
  nota        String?
  fechaPago   DateTime     @default(now())
  orden       Orden        @relation(fields: [ordenId], references: [id])
  vueltos     VueltoEntregado[]
}

// Modelo de VueltoEntregado
model VueltoEntregado {
  id      Int    @id @default(autoincrement())
  pagoId  Int
  monto   Float
  moneda  String
  pago    Pago   @relation(fields: [pagoId], references: [id], onDelete: Cascade)
  @@index([pagoId])
}

// Modelo de Configuración
model Configuracion {
  id                  Int       @id @default(1)
  nombreNegocio       String?
  monedaPrincipal     Moneda    @default(USD)
  tasaUSD             Float?
  tasaVES             Float?
  tasaCOP             Float?
  rif                 String?
  direccion           String?
  telefonoPrincipal   String?
  telefonoSecundario  String?
  mensajePieRecibo    String?
}
